`useState` hook ka istemal React functional components mein state management ke liye hota hai. Traditional taur par, functional components stateless hote hain, aur agar aap unme state use karna chahte hain to aapko `useState` hook ki zarurat padti hai. Yahan kuch reasons hain jinse samajh aa sakta hai ki `useState` hook kyun important hai:

1. **Functional Components:**
   Functional components asal mein stateless hote hain. Pehle, class components hi state ko manage karte thay, lekin functional components mein `useState` hook ki madad se state ka istemal kar sakte hain. Isse code likhne mein asaan ho jata hai.

2. **Component Re-rendering:**
   React mein state ka update component ko re-render karta hai. `useState` hook ke istemal se state ko update karne par component automatically re-render hota hai, aur updated state ke sath UI refresh ho jati hai.

3. **Immutable State:**
   `useState` hook ke istemal se aap state ko directly modify nahi karte, balki new state create karte hain. Isse React immutable state pattern follow karta hai, jisse state changes ka tracking aur debugging aasan ho jata hai.

4. **Functional Programming Principles:**
   `useState` hook functional programming principles ko follow karta hai, jisme state ko read-only rakha jata hai aur har modification ke liye new state object create hota hai.

5. **Multiple State Variables:**
   Functional components mein multiple `useState` calls ke through aap multiple state variables manage kar sakte hain, jisse aapko alag-alag aspects ke liye alag-alag states milte hain.

6. **Asynchronous State Updates:**
   `useState` hook ke istemal se state ko asynchronously update kiya ja sakta hai, aur isme callback functions ka istemal karke aap previous state ka bhi access kar sakte hain.

Example:
```jsx
import React, { useState } from 'react';

function ExampleComponent() {
  // useState hook ka istemal state variable aur uski updater function ke liye
  const [count, setCount] = useState(0);

  // State ko update karne ke liye
  const handleIncrement = () => {
    setCount(prevCount => prevCount + 1);
  };

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={handleIncrement}>Increment</button>
    </div>
  );
}
```

In sab karanon se, `useState` hook ka istemal state management ko asaan aur predictable banata hai, jisse React components ko efficiently update kiya ja sakta hai.

Kaam Normal Varieble se Kyu Nhi Huwa?

Normal variable ka use React functional components mein state management ke liye nahi hota, kyunki functional components inherently stateless hote hain. Jab aap ek functional component mein koi variable declare karte hain, to wo variable local scope mein hota hai aur har baar component re-render hota hai, us variable ka state maintain nahi hota.

React mein state ko maintain karne ke liye, hume ek mechanism ki zarurat hoti hai jo component re-render hota hai lekin uska state bhi persist rehta hai. Iske liye, `useState` hook ka istemal hota hai, jisse aap stateful logic ko functional components mein bhi implement kar sakte hain.

`useState` hook ke use se state variables ka lifecyle component ke sath sync rehta hai, aur har state update ke sath component ko re-render karta hai. Ye ek part hai React ke functional programming principles ka, jisme state ko immutable rakha jata hai aur new state create karke updates kiye jate hain.

Aap normal variable ka istemal to kar sakte hain, lekin aise variable ka state maintain nahi hota aur har re-render ke sath wo variable reset ho jata hai. Jisse, dynamic data ko track karna, UI ko update karna, aur stateful behavior implement karna mushkil ho jata hai.

Example:
```jsx
import React from 'react';

function ExampleComponent() {
  // Normal variable ka istemal state ke liye
  let count = 0;

  // Increment button click par count ko update karna
  const handleIncrement = () => {
    count += 1;
    // Ye component re-render hoga, lekin count ka state nahi maintain hoga
  };

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={handleIncrement}>Increment</button>
    </div>
  );
}
```

Is example mein, `count` variable har baar re-render hote hi reset ho jayega, aur aapko desired stateful behavior nahi milega. Isiliye, React functional components mein state management ke liye `useState` hook ka istemal karna important hai.